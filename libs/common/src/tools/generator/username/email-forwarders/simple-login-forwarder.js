"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleLoginForwarder = void 0;
class SimpleLoginForwarder {
    generate(apiService, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.apiKey == null || options.apiKey === "") {
                throw "Invalid SimpleLogin API key.";
            }
            const requestInit = {
                redirect: "manual",
                cache: "no-store",
                method: "POST",
                headers: new Headers({
                    Authentication: options.apiKey,
                    "Content-Type": "application/json",
                }),
            };
            let url = options.simplelogin.baseUrl + "/api/alias/random/new";
            if (options.website != null) {
                url += "?hostname=" + options.website;
            }
            requestInit.body = JSON.stringify({
                note: (options.website != null ? "Website: " + options.website + ". " : "") +
                    "Generated by Bitwarden.",
            });
            const request = new Request(url, requestInit);
            const response = yield apiService.nativeFetch(request);
            if (response.status === 200 || response.status === 201) {
                const json = yield response.json();
                return json.alias;
            }
            if (response.status === 401) {
                throw "Invalid SimpleLogin API key.";
            }
            const json = yield response.json();
            if ((json === null || json === void 0 ? void 0 : json.error) != null) {
                throw "SimpleLogin error:" + json.error;
            }
            throw "Unknown SimpleLogin error occurred.";
        });
    }
}
exports.SimpleLoginForwarder = SimpleLoginForwarder;
//# sourceMappingURL=simple-login-forwarder.js.map